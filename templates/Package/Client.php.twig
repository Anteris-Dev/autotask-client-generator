<?php

namespace Anteris\Autotask;

{%~ for service in services|sort %}
use Anteris\Autotask\API\{{ service.plural }}\{{ service.singular }}Service;
{%~ endfor %}

class Client
{
    /** @var array Stores an instance of each class when created for faster performance. */
    protected array $classCache = [];

    /** @var HttpClient A minimal HTTP client to be passed to each service class. */
    protected HttpClient $client;

    /** @var bool Use POST for /query requests. */
    protected bool $usePostForQuery;

    /**
     * Creates a new HTTP client with headers to authenticate with Autotask.
     *
     * @param  string  $username         Autotask API user's username.
     * @param  string  $secret           Autotask API user's password.
     * @param  string  $integrationCode  Autotask API user's integration code.
     * @param  string  $baseUri          Autotask API URL.
     * @param  bool    $usePostForQuery     Use POST for /query requests.
     */
    public function __construct(
        string $username,
        string $secret,
        string $integrationCode,
        string $baseUri,
        bool $usePostForQuery = false
    )
    {
        $this->client = new HttpClient($username, $secret, $integrationCode, $baseUri);
        $this->usePostForQuery = $usePostForQuery;
    }
{%~ for service in services|sort ~%}
    /**
     * Handles any interaction with the {{ service.plural }} endpoint.
     */
    public function {{ service.plural|first|lower }}{{ service.plural|slice(1) }}(): {{ service.singular }}Service
    {
        if (! isset($this->classCache['{{ service.plural }}'])) {
            $this->classCache['{{ service.plural }}'] = new {{ service.singular }}Service($this->client, $this->usePostForQuery);
        }

        return $this->classCache['{{ service.plural }}'];
    }
{% endfor %}
}
