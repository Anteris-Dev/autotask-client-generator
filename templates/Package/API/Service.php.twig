<?php

namespace Anteris\Autotask\API\{{ entityName.plural }};

use Anteris\Autotask\Support\EntityFields\EntityFieldCollection;
use Anteris\Autotask\Support\EntityInformation\EntityInformationEntity;
{%- if entityInformation.hasUserDefinedFields ~%}
use Anteris\Autotask\Support\EntityUserDefinedFields\EntityUserDefinedFieldCollection;
{%- endif ~%}
use GuzzleHttp\Client;
{%- if (entityInformation.canCreate or entityInformation.canUpdate) ~%}
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
{%- endif ~%}

/**
 * Handles all interaction with Autotask {{ entityName.plural }}.
 * @see https://ww14.autotask.net/help/DeveloperHelp/Content/AdminSetup/2ExtensionsIntegrations/APIs/REST/Entities/{{ entityName.plural }}Entity.htm Autotask documentation.
 */
class {{ entityName.singular }}Service
{
    /** @var Client An HTTP client for making requests to the Autotask API. */
    protected Client $client;

    /**
     * Instantiates the class.
     *
     * @param  Client  $client  The http client that will be used to interact with the API.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function __construct(Client $client)
    {
        $this->client = $client;
    }
{%~ if entityInformation.canCreate ~%}
    /**
     * Creates a new {{ entityName.singular|lower }}.
     *
     * @param  {{ entityName.singular }}Entity  $resource  The {{ entityName.singular|lower }} entity to be written.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function create({{ entityName.singular }}Entity $resource)
    {
        {%~ if parent.ref %}
        ${{ parent.ref }} = $resource->{{ parent.ref }};
        {%~ endif %}
        $request  = new Request('POST', "
            {%- if parent.path -%}
                {{- parent.path | raw -}}
            {%- else -%}
                {{- entityName.plural -}}
            {%- endif -%}
            ", [], $resource->toArray());
        $response = $this->client->send($request);
    }
{%~ endif -%}

{%- if entityInformation.canDelete ~%}
    /**
     * Deletes an entity by its ID.
     *
{% if parent.path %}
     * @param  int  ${{ parent.ref }}  ID of the {{ entityName.singular }} parent resource.
{%~ endif %}
     * @param  int  $id  ID of the {{ entityName.singular }} to be deleted.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function deleteById(
        {%- if parent.path -%}
            int ${{ parent.ref }},
        {%- endif -%} int $id): void
    {
        $request  = new Request('DELETE', "
            {%- if parent.path -%}
                {{- parent.path | raw -}}
            {%- else -%}
                {{- entityName.plural -}}
            {%- endif -%}
        /$id");
        $response = $this->client->send($request);
    }
{%~ endif -%}

{%- if entityInformation.canQuery ~%}
    /**
     * Finds the {{ entityName.singular }} based on its ID.
     *
     * @param  string $id  ID of the entity to be retrieved.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function findById(int $id): {{ entityName.singular }}Entity
    {
        $request  = new Request('GET', "{{ entityName.plural }}/$id");
        $response = $this->client->send($request);

        return {{ entityName.singular }}Entity::fromGuzzle(
            $request,
            $response
        );
    }
{%~ endif ~%}
    /**
     * Returns information about what fields an entity has.
     *
     * @see EntityFieldCollection
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function getEntityFields(): EntityFieldCollection
    {
        $request  = new Request('GET', '{{ entityName.plural }}/entityInformation/fields');
        $response = $this->client->send($request);

        return EntityFieldCollection::fromGuzzle($request, $response);
    }

    /**
     * Returns information about what actions can be made against an entity.
     *
     * @see EntityInformationEntity
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function getEntityInformation(): EntityInformationEntity
    {
        $request  = new Request('GET', '{{ entityName.plural }}/entityInformation');
        $response = $this->client->send($request);

        return EntityInformationEntity::fromGuzzle($request, $response);
    }
{%~ if entityInformation.hasUserDefinedFields ~%}
    /**
     * Returns information about what user defined fields an entity has.
     *
     * @see EntityUserDefinedFieldCollection
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function getEntityUserDefinedFields(): EntityUserDefinedFieldCollection
    {
        $request  = new Request('{{ entityName.plural }}/entityInformation/userDefinedFields');
        $response = $this->client->send($request);

        return EntityUserDefinedFieldCollection::fromGuzzle($request, $response);
    }
{%~ endif -%}
{%- if entityInformation.canQuery ~%}
    /**
     * Returns an instance of the query builder for this entity.
     *
     * @see {{ entityName.singular }}QueryBuilder The query builder class.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function query(): {{ entityName.singular }}QueryBuilder
    {
        return new {{ entityName.singular }}QueryBuilder($this->client);
    }
{%~ endif -%}

{%- if entityInformation.canUpdate ~%}
    /**
     * Updates the {{ entityName.singular|lower }}.
     *
     * @param  {{ entityName.singular }}Entity  $resource  The {{ entityName.singular|lower }} entity to be updated.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function update({{ entityName.singular }}Entity $resource)
    {
        {%~ if parent.ref %}
        ${{ parent.ref }} = $resource->{{ parent.ref }};
        {%~ endif %}
        $request  = new Request('PUT', "
            {%- if parent.path -%}
                {{- parent.path | raw -}}
            {%- else -%}
                {{- entityName.plural -}}
            {%- endif -%}
        ", [], $resource->toArray());
        $response = $this->client->send($request);
    }
{%~ endif -%}
}
