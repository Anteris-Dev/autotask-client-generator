<?php

namespace Anteris\Autotask\API\{{ entityName.plural }};

{%~ for import in imports|sort %}
use {{ import }};
{%~ endfor %}

/**
 * Represents {{ entityName.singular }} entities.
 */
class {{ entityName.singular }}Entity extends DataTransferObject
{
{% for field in fields %}
    public {% if (field.isRequired != true and field.dataType != 'null') or (field.name == 'paymentTerms') or (field.name == 'quantityNowReceiving') -%}?{%- endif -%}{%- if field.dataType != 'null' %}{{- field.dataType }} {% endif %}${{ field.name -}};
{%~ endfor %}
{% if 'Attachment' in entityName.plural and entityName.singular != 'AttachmentInfo' %}
    public $id;
    public ?string $data;
{%~ endif %}
    /** @var \Anteris\Autotask\Support\UserDefinedFields\UserDefinedFieldEntity[]|null */
    public ?array $userDefinedFields;

    /**
     * Creates a new {{ entityName.singular }} entity.
     * If this entity has dates, they will be cast as Carbon objects.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public function __construct(array $array)
    {
{%- for field in fields -%}
    {%~ if field.dataType == 'Carbon' ~%}
        if (isset($array['{{- field.name -}}'])) {
            $array['{{- field.name -}}'] = new Carbon($array['{{- field.name -}}']);
        }
    {%~ else -%}
    {% endif -%}
{% endfor ~%}
        parent::__construct($array);
    }

    /**
     * Creates an instance of this class from a Guzzle request / response.
     *
     * @param  Request   $request   The http request sent.
     * @param  Response  $response  The http response received.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public static function fromGuzzle(Request $request, Response $response): {{ entityName.singular }}Entity
    {
        $array = json_decode($response->getBody(), true);

        /**
         * Here we are just making sure the item key exists so we can determine
         * if a resource does not exist or if it was returned.
         */
        if (array_key_exists('item', $array) === false) {
            throw new ClientException(
                'Unable to find {{ entityName.singular }}. Expecting "item" key in response!',
                $request,
                $response
            );
        }

        /**
         * Instead of giving us a 404, Autotask sets the 'item' key to null. Here
         * we throw an exception as if it was a 404 response.
         */
        if ($array['item'] === null) {
            throw new ClientException(
                '{{ entityName.singular }} does not exist!',
                $request,
                $response
            );
        }

        return new static($array['item']);
    }
}
