<?php

namespace Anteris\Autotask\Support\EntityFields;

use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use Spatie\DataTransferObject\DataTransferObjectCollection;

/**
 * Contains a collection of entity fields.
 * @see EntityFieldEntity
 */
class EntityFieldCollection extends DataTransferObjectCollection
{
    /**
     * Sets the proper return type for IDE completion.
     */
    public function current(): EntityFieldEntity
    {
        return parent::current();
    }

    /**
     * Sets the proper return type for IDE completion.
     */
    public function offsetGet($offset): EntityFieldEntity
    {
        return parent::offsetGet($offset);
    }

    /**
     * Creates an instance of this class from a Guzzle request / response.
     *
     * @param  Request   $request   The http request sent.
     * @param  Response  $response  The http response received.
     *
     * @author Aidan Casey <aidan.casey@anteris.com>
     */
    public static function fromGuzzle(Request $request, Response $response): EntityFieldCollection
    {
        $array = json_decode($response->getBody(), true);

        /**
         * Here we are just making sure the fields key exists.
         */
        if (array_key_exists('fields', $array) === false) {
            throw new ClientException(
                'Unable to find entity fields for {{ entityName.plural }}. Expecting "fields" key in response!',
                $request,
                $response
            );
        }

        /**
         * Here we will check if the fields key is null and just return an empty
         * collection if so.
         */
        if ($array['fields'] === null) {
            return new static([]);
        }

        /**
         * And here we finally return the result.
         */
        return new static(
            EntityFieldEntity::arrayOf($array['fields'])
        );
    }
}
